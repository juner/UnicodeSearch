@page "/code";
@page "/code/{CodePoint}";
@using System.Unicode;
@using System.Globalization;
@inject NavigationManager nav;
<Title>@(int.TryParse(CodePoint, NumberStyles.HexNumber, NumberFormatInfo.InvariantInfo, out var _CodePoint) && char.ConvertFromUtf32(_CodePoint) is string charactor 
    ? charactor + " - " : "") Unicode Charactor</Title>
<div class="text-right">Unicode @UnicodeInfo.UnicodeVersion</div>
@if (int.TryParse(CodePoint, NumberStyles.HexNumber, NumberFormatInfo.InvariantInfo, out var _CodePoint))
{
    var UnicodeInfo = System.Unicode.UnicodeInfo.GetCharInfo(_CodePoint);
<div class="row my-3">
    <div class="px-3">
        <div class="display-2 d-flex" style="max-width:8ex;min-width:8ex;font-family:monospace;">
            <span>U+</span>
            <span class="flex-fill text-right">@string.Format("{0:X4}", UnicodeInfo.CodePoint)</span>
        </div>
    </div>
    <div class="col-sm-12 col-md-auto col-xl-auto">
        <div class="row">
            <div class="px-3">
                <span class="d-inline-block p-1 border mr-1" style="min-width:2ex;min-height:2ex">&#8203;@(UnicodeInfo.GetDisplayText())&#8203;</span>
            </div>
            <div class="col-auto overflow-auto">@(UnicodeInfo.Name ?? UnicodeInfo.OldName)</div>
        </div>
        <table >
            <tbody>
                <tr>
                    <th>Category:</th>
                    <td>@UnicodeInfo.Category</td>
                </tr>
                @if (!string.IsNullOrEmpty(UnicodeInfo.VietnameseReading))
                {
                    <tr>
                        <th>VietnameseReading:</th>
                        <td>@UnicodeInfo.VietnameseReading</td>
                    </tr>
                }
                @if (!string.IsNullOrEmpty(UnicodeInfo.HangulReading))
                {
                    <tr>
                        <th>HangulReading:</th>
                        <td>@UnicodeInfo.HangulReading</td>
                    </tr>
                }
                @if (!string.IsNullOrEmpty(UnicodeInfo.KoreanReading))
                {
                    <tr>
                        <th>KoreanReading</th>
                        <td>@UnicodeInfo.KoreanReading</td>
                    </tr>
                }
                @if (!string.IsNullOrEmpty(UnicodeInfo.JapaneseOnReading))
                {
                    <tr>
                        <th>JapaneseOnReading</th>
                        <td>@UnicodeInfo.JapaneseOnReading</td>
                    </tr>
                }
                @if (!string.IsNullOrEmpty(UnicodeInfo.JapaneseKunReading))
                {
                    <tr>
                        <th>JapaneseKunReading</th>
                        <td>@UnicodeInfo.JapaneseKunReading</td>
                    </tr>
                }
                @if (!string.IsNullOrEmpty(UnicodeInfo.CantoneseReading))
                {
                    <tr>
                        <th>CantoneseReading</th>
                        <td>@UnicodeInfo.CantoneseReading</td>
                    </tr>
                }
                <tr>
                    <th>CanonicalCombiningClass:</th>
                    <td>@UnicodeInfo.CanonicalCombiningClass</td>
                </tr>
            </tbody>
        </table>
    </div>
</div>
} else {

}
@code {
    [Parameter]
    public string CodePoint { get; set; } = string.Empty;
}
