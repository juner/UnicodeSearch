@page "/";
@page "/text";
@page "/text/{Value}";
@using System.Unicode;
@inject NavigationManager nav;
<Title>@(string.IsNullOrEmpty(Value) ? "" : Value + " - ") Unicode Information</Title>
<div class="text-right">Unicode @UnicodeInfo.UnicodeVersion</div>
<div class="input-group mb-3">
    <input type="search" value="@Value" class="form-control" name="q" placeholder="CHARACTER" @oninput="InputText" />
</div>
@if (UnicodeList.Any())
{
    @foreach (var UnicodeInfo in UnicodeList)
    {
        var CodePoint = string.Format("{0:X4}", UnicodeInfo.CodePoint);
        <div class="row my-3">
            <div class="px-3">
                <div class="display-2 d-flex" style="max-width:8ex;min-width:8ex;font-family:monospace;">
                    <span>U+</span>
                    <span class="flex-fill text-right">@CodePoint</span>
                </div>
            </div>
            <div class="col-sm-12 col-md-auto col-xl-auto">
                <div class="row">
                    <div class="px-3">
                        <span class="d-inline-block p-1 border mr-1" style="min-width:2ex;min-height:2ex">&#8203;@(UnicodeInfo.GetDisplayText())&#8203;</span>
                    </div>
                    <div class="col-auto overflow-auto">@(UnicodeInfo.Name ?? UnicodeInfo.OldName)</div>
                </div>
                <div class="row px-3">
                    <NavLink href="@($"/code/{CodePoint}")" Match="NavLinkMatch.All">more information</NavLink>
                </div>
            </div>
        </div>}
}
@code {
    [Parameter]
    public string Value { get; set; } = string.Empty;
    private List<UnicodeCharInfo> UnicodeList = new List<UnicodeCharInfo>();
    private void InputText(ChangeEventArgs e)
    {
        var Value = e.Value.ToString();
        UnicodeList.Clear();
        UnicodeList.AddRange(new UnicodeEnumerable(Value));
        if (string.IsNullOrEmpty(Value))
            nav.NavigateTo("/text/");
        else
            nav.NavigateTo($"/text/{Uri.EscapeUriString(Value)}");
    }
    protected override Task OnInitializedAsync()
    {
        InputText(new ChangeEventArgs { Value = Value ?? string.Empty }) ;
        return base.OnInitializedAsync();
    }
}
