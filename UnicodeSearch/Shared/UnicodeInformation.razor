@using System.Unicode
@using CurrieTechnologies.Razor.Clipboard
@inject ClipboardService clipboard
<div class="row my-3">
    <div class="row px-3 display-sm-4 display-3" style="vertical-align:bottom;">
        <div class="flex-fill align-items-start"><div class="row m-0 align-items-end">
            <span style="font-family:monospace;">U+</span>
            <span class="flex-fill text-right d-inline-block" style="font-family:monospace;min-width:6ex;max-width:6ex;">@($"{UnicodeInfo.CodePoint:X4}")</span>
            <span class="ml-1 p-1 d-inline-block border text-center text-nowrap" style="min-width:2ex;min-height:2ex"><span class="display-sm-5 display-4" style="margin-left:-1ex">&#8203;</span>@(UnicodeInfo.GetDisplayText())<span class="display-sm-5 display-4" style="margin-right:-1ex">&#8203;</span></span>
        </div></div>
    </div>
    <div class="col-sm-12 col-md-auto col-xl-auto">
        <div class="row col-auto overflow-auto">
            @(UnicodeInfo.Name ?? UnicodeInfo.OldName)
            <button class="btn btn-link p-0 m-0 mx-1" title="copy to clipboard" @onclick="async () => await clipboard.WriteTextAsync(char.ConvertFromUtf32(UnicodeInfo.CodePoint))">ðŸ“‹</button>
        </div>
        <table class="table table-striped table-responsive">
            <thead class="thead-dark">
                <tr>
                    <th scope="col">name</th>
                    <th scope="col">value</th>
                </tr>
            </thead>
            <tbody>
                @foreach( var property in typeof(System.Unicode.UnicodeCharInfo).GetProperties())
                {
                    var value = property.GetValue(UnicodeInfo);
                    if (value is null)
                        continue;
                    if (value is string strval && string.IsNullOrEmpty(strval))
                        continue;
                    if (!(value is string) && value is System.Collections.IEnumerable enumerable && !enumerable.Cast<object>().Any())
                        continue;
                    var isEnumFlags = value.GetType().IsEnum && Attribute.IsDefined(value.GetType(), typeof(FlagsAttribute));
                    <tr>
                        <th class="align-top" scope="row">@(property.Name):</th>
                        <td>
                            @if (value is Enum _enum && isEnumFlags)
                            {
                                <div class="column">
                                @foreach(var e in Enum.GetValues(value.GetType())) {
                                    if (!_enum.HasFlag(_enum))
                                        continue;
                                    <div>@e</div>
                                }
                                </div>
                            }else if(value is UnicodeCrossReferenceCollection unicodeCrossReferenceCollection) 
                            {
                                <div class="column">
                                @foreach(var unicodeCrossReference in unicodeCrossReferenceCollection) 
                                {
                                    var ucr = System.Unicode.UnicodeInfo.GetCharInfo(unicodeCrossReference);
                                    <div>
                                        <NavLink href="@($"/code/{unicodeCrossReference:X4}")">
                                            @($"{ucr.Name} (U+{unicodeCrossReference:X4})")
                                        </NavLink>
                                    </div>
                                }
                                </div>
                            } else if (value is System.Unicode.UnicodeRadicalStrokeCountCollection unicodeRadicalStrokeCountCollection) 
                            {
                                <table>
                                    <thead>
                                        <tr>
                                            <th scope="col">Radical</th>
                                            <th scope="col">StrokeCount</th>
                                            <th scope="col">IsSimplified</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                @foreach(var unicodeRadicalStrokeCount in unicodeRadicalStrokeCountCollection)
                                {
                                        <tr>
                                            <td>@unicodeRadicalStrokeCount.Radical</td>
                                            <td>@unicodeRadicalStrokeCount.StrokeCount</td>
                                            <td>@unicodeRadicalStrokeCount.IsSimplified</td>
                                        </tr>
                                }
                                    </tbody>
                                </table>
                            } else if(property.Name == "Block"){
                                <NavLink href="@($"/block/{Uri.EscapeUriString(value.ToString())}")">
                                    @value
                                </NavLink>
                            } else {
                                @value
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
@code {
    // Demonstrates how a parent component can supply parameters
    [Parameter]
    public UnicodeCharInfo? Unicode { get; set; }
    public UnicodeCharInfo UnicodeInfo => Unicode ?? throw new InvalidOperationException(nameof(Unicode) + "is null");
}
